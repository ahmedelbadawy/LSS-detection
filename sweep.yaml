program: train.py

method: random

project: Classification_stenosis

metric:
  goal: maximize
  name: test_acc
  
parameters:
  batch_size:
    values:
    - 16
    - 32
    - 64


  optimizer:
    distribution: categorical
    values:
    - "RMSprop"
    - "Adam"
    - "SGD"
    - "AdamW"
    - "RAdam"
    - "NAdam"
      
  loss_fn:
    distribution: categorical
    values:
    - "focal"
    - "CCE"

    
  lr:
    distribution: log_uniform_values
    max: 5e-1
    min: 5e-4
          
  augmentation:
    distribution: categorical
    values:
    - 'method7'
    - 'method8'
    - 'method9'
    - 'method10'
      

  model:
    distribution: categorical
    values:
    - 'convnext'
    - 'efficientnet'
    - 'regnet_y_16gf'
    - 'resnet'


  image_size:
    distribution: categorical
    values:
    - 224
    - 240
    - 260
    - 300
    - 380

  focalLoss_gamma:
    distribution: categorical
    values:
    - 0.5
    - 1
    - 1.5
    - 2
    - 2.5
    - 3
    - 3.5

 

  scheduler:
    distribution: categorical
    values:
    - "cosine"
    - "plateau"
    
  scheduler_factor:
    distribution: log_uniform_values
    max: 9e-1
    min: 1e-2

  scheduler_patience:
    distribution: categorical
    values:
      - 5
      - 10
      - 15
      - 20

  cosine_T_mult:
    distribution: categorical
    values:
      - 1
      - 2
      - 3
  
  pretrained:
    distribution: categorical
    values:
      - True
      - False
  imbalance:
    distribution: categorical
    values:
      - "weighted_random"
      - "weighted_loss"

  clip_norm:
    distribution: uniform
    max: 4
    min: 1

  weight_decay:
    distribution: log_uniform_values
    max: 1e-2
    min: 8e-5
  
  l1_param:
    distribution: log_uniform_values
    max: 1e-2
    min: 8e-5